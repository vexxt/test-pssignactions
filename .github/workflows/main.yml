name: Sign PowerShell Scripts
on:
  push:
    branches:
    - working
env:
  ARTIFACT_NAME: PowerShell.Workflows.ScriptSigning
jobs:
  sign_scripts:
    name: Sign and publish PowerShell scripts
    runs-on: windows
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        
      - name: Sign PowerShell scripts
        #env: 
        #  PAT: ${{ secrets.PAT }}
        shell: powershell
        run: |
          $verbosepreference = 'continue'
           $authenticode = New-SelfSignedCertificate -Subject "ATA Authenticode" -CertStoreLocation Cert:\LocalMachine\My -Type CodeSigningCert
           $rootStore = [System.Security.Cryptography.X509Certificates.X509Store]::new("Root","LocalMachine")
           $rootStore.Open("ReadWrite")
           $rootStore.Add($authenticode)
           $rootStore.Close()
           $publisherStore = [System.Security.Cryptography.X509Certificates.X509Store]::new("TrustedPublisher","LocalMachine")
           $publisherStore.Open("ReadWrite")
           $publisherStore.Add($authenticode) 
           $publisherStore.Close()
          #try {
            $cert = Get-ChildItem Cert:\CurrentUser\My\ -ErrorAction Stop -CodeSigningCert <#| Where-Object {$_.NotAfter -lt (Get-Date)}#> | Select-Object -First 1
            write-host $cert.psparentpath
            #if ($null -eq $cert) {
            #    throw "no code signing certificate found"
            #}
            
            # Add the self-signed Authenticode certificate to the computer's root certificate store.
            ## Create an object to represent the LocalMachine\Root certificate store.
             $rootStore = [System.Security.Cryptography.X509Certificates.X509Store]::new("Root","LocalMachine")
            ## Open the root certificate store for reading and writing.
             $rootStore.Open("ReadWrite")
            ## Add the certificate stored in the $authenticode variable.
             $rootStore.Add($authenticode)
            ## Close the root certificate store.
             $rootStore.Close()

            # Add the self-signed Authenticode certificate to the computer's trusted publishers certificate store.
            ## Create an object to represent the LocalMachine\TrustedPublisher certificate store.
             $publisherStore = [System.Security.Cryptography.X509Certificates.X509Store]::new("TrustedPublisher","LocalMachine")
            ## Open the TrustedPublisher certificate store for reading and writing.
             $publisherStore.Open("ReadWrite")
            ## Add the certificate stored in the $authenticode variable.
             $publisherStore.Add($authenticode)
            ## Close the TrustedPublisher certificate store.
             $publisherStore.Close()
            
            
            
            $scripts = Get-ChildItem $ENV:GITHUB_WORKSPACE -Recurse -Filter *.ps1
            foreach ($ps1 in $scripts) {
                $Signature = Set-AuthenticodeSignature $ps1.FullName -Certificate $cert -verbose
                write-host $Signature.StatusMessage
                write-host $Signature
                
            }
          #}
          #Catch [System.Management.Automation.ItemNotFoundException] {
          #    Write-Error -message "code sign certificate not available" -Exception $_.exception.message
          #}
          #Catch {
          #    throw $_.exception.message
          #}
          $GIT_URL = [system.uri]("{0}/{1}" -f $env:GITHUB_SERVER_URL,$env:GITHUB_REPOSITORY)
          $gitUriPAT = "{0}://{1}@{2}{3}" -f $GIT_URL.scheme,$env:GITHUB_TOKEN,$GIT_URL.Host,$GIT_URL.AbsolutePath
          write-host $gituripat

          git add *.ps1 *.txt
          git commit -m $ENV:GITHUB_ACTOR
          git push $gitUriPAT HEAD:refs/heads/main -f
